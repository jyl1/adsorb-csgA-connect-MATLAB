echo on
% dataRead_SS.m
% Oct.12, 2015. YJL
% Reads in .DAT files written by VMD corresponding to SS_1.tcl. 
% File format:
%   - 1 or more lines of header beginning with 'RUN'
%   - Lines of data with column
%   (1) Frame #
%   (2) Total # residues involved in beta-sheets
% Outputs are saved as:
%   1) (surface)_SS_(orientation).mat - columns of 131 residues in
%   the protein. Each row is sum of data over 125 frame (250ps) 
%   2) (surface)_SS_(orientation).mat - rows are data at each
%   frame (2ps). Columns are same as 1 & 2 
echo off
%% Setup file to load data
fid = fopen(fp);
% Discard first header line
line1 = fgetl(fid);
while strcmp(line1(1:3),'RUN')
    line1 = fgetl(fid);
end
% The data is windowed (125 frames, 250ps) in order to compare with
% B-factor data (equivalent windowing). Protein has 131 residues. Allocate
% with 10,000 rows of NaN for ample space. 
Y = nan(10000,131); % (windowed) # of interactions at each residue

% Summary data are collected as the number of residues with SS by
% residue type
Y_sum = nan(40000,7); % summary data (not windowed)

%% While Loop Initialization
% % Counters
ctr = 1;
ctrY = 1;
ctrY_sum = 1;

% % Dataholders
data = zeros(1, 131);

%% While loop
strLine = line1;
% % Load data line by line. Covert line to 1D array. Use histc to organize
% % bins of 1-residue each. (This may be slow).
while ischar(strLine) && ctr <= 125
    if ctr == 125 % 1 window has been filled
        disp(num2str([ctrY]))
        Y(ctrY,:) = data; ctrY = ctrY + 1;
        % reset vars associated with collecting data for 1 window
        ctr = 0;
        data = zeros(1, 131);
    end
    dataLine = str2double(strsplit(strLine));
    dataLine(isnan(dataLine))=[];
    
    if length(dataLine)>2  % if lists of residues are available
        n = histc(dataLine(3:end), 1:131);
        % accumulate counts of residues
        data = data + n;
        % See what type of residue is involved 
        restype = [sum(n(polar)) sum(n(acid)) sum(n(base)) ...
            sum(n(hphobe)) sum(n(aro))];
    else
        % If no residues are involved
        restype = zeros(1,5);
    end
    
    % summary data (total and residue type
    Y_sum(ctrY_sum,:) = [dataLine(1:2) restype]; ctrY_sum = ctrY_sum+1;
    
    % continue while loop
    ctr = ctr + 1;
    strLine = fgetl(fid);
end
fclose(fid);
%% Clean up the lagging bits (<125 window) for Y
Y(ctrY,:) = data;
%% Remove nans as needed
% Y: remove nan rows
Y = Y(any(~isnan(Y),2),:); 
% Y_sum: remove nan rows
Y_sum = Y_sum(any(~isnan(Y_sum),2),:);
%% Save files
dp = saveDP; 
saveStr = [expSurf '_SS_'];

% Y
fp = [dp '\' saveStr expStr];
save(fp,'Y');

% Y_sum
saveStr = [expSurf '_sum_SS_'];
fp = [dp '\' saveStr expStr];
save(fp,'Y_sum');

%% Report finished
disp('END')
